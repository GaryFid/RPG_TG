'use client'

import { useState, useMemo } from 'react'
import { useGameStore } from '@/stores/gameStore'

interface CraftingRecipe {
  id: string
  name: string
  description: string
  emoji: string
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary'
  ingredients: {
    id: string
    name: string
    emoji: string
    quantity: number
  }[]
  result: {
    id: string
    name: string
    emoji: string
    quantity: number
    stats?: {
      attack?: number
      defense?: number
      health?: number
      mana?: number
    }
  }
  craftingTime: number // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  requiredLevel: number
  goldCost: number
}

interface CraftingSlot {
  id: number
  item: {
    id: string
    name: string
    emoji: string
    quantity: number
  } | null
}

export default function CraftingSystem() {
  const { character, setCurrentView } = useGameStore()
  const [craftingSlots, setCraftingSlots] = useState<CraftingSlot[]>([
    { id: 1, item: null },
    { id: 2, item: null },
    { id: 3, item: null },
    { id: 4, item: null },
    { id: 5, item: null }
  ])
  const [selectedRecipe, setSelectedRecipe] = useState<CraftingRecipe | null>(null)
  const [isCrafting, setIsCrafting] = useState(false)

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ (–º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
  const availableItems = [
    { id: 'wood', name: '–î–µ—Ä–µ–≤–æ', emoji: 'ü™µ', quantity: 50 },
    { id: 'stone', name: '–ö–∞–º–µ–Ω—å', emoji: 'ü™®', quantity: 30 },
    { id: 'iron', name: '–ñ–µ–ª–µ–∑–æ', emoji: '‚öôÔ∏è', quantity: 20 },
    { id: 'leather', name: '–ö–æ–∂–∞', emoji: 'ü¶¨', quantity: 15 },
    { id: 'magic_crystal', name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª', emoji: 'üíé', quantity: 5 },
    { id: 'herb', name: '–¢—Ä–∞–≤–∞', emoji: 'üåø', quantity: 25 },
    { id: 'old_sword', name: '–°—Ç–∞—Ä—ã–π –º–µ—á', emoji: '‚öîÔ∏è', quantity: 1 },
    { id: 'old_armor', name: '–°—Ç–∞—Ä–∞—è –±—Ä–æ–Ω—è', emoji: 'üõ°Ô∏è', quantity: 1 }
  ]

  // –†–µ—Ü–µ–ø—Ç—ã –∫—Ä–∞—Ñ—Ç–∞
  const recipes: CraftingRecipe[] = useMemo(() => [
    {
      id: 'iron_sword',
      name: '–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
      description: '–ü—Ä–æ—á–Ω—ã–π –º–µ—á –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞',
      emoji: '‚öîÔ∏è',
      rarity: 'uncommon',
      ingredients: [
        { id: 'iron', name: '–ñ–µ–ª–µ–∑–æ', emoji: '‚öôÔ∏è', quantity: 3 },
        { id: 'wood', name: '–î–µ—Ä–µ–≤–æ', emoji: 'ü™µ', quantity: 2 }
      ],
      result: {
        id: 'iron_sword',
        name: '–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
        emoji: '‚öîÔ∏è',
        quantity: 1,
        stats: { attack: 25 }
      },
      craftingTime: 300,
      requiredLevel: 5,
      goldCost: 100
    },
    {
      id: 'leather_armor',
      name: '–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è',
      description: '–õ–µ–≥–∫–∞—è –∏ –≥–∏–±–∫–∞—è –∑–∞—â–∏—Ç–∞',
      emoji: 'ü¶∫',
      rarity: 'common',
      ingredients: [
        { id: 'leather', name: '–ö–æ–∂–∞', emoji: 'ü¶¨', quantity: 4 },
        { id: 'iron', name: '–ñ–µ–ª–µ–∑–æ', emoji: '‚öôÔ∏è', quantity: 1 }
      ],
      result: {
        id: 'leather_armor',
        name: '–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è',
        emoji: 'ü¶∫',
        quantity: 1,
        stats: { defense: 15 }
      },
      craftingTime: 240,
      requiredLevel: 3,
      goldCost: 75
    },
    {
      id: 'health_potion',
      name: '–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è',
      description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ',
      emoji: 'üß™',
      rarity: 'common',
      ingredients: [
        { id: 'herb', name: '–¢—Ä–∞–≤–∞', emoji: 'üåø', quantity: 3 },
        { id: 'magic_crystal', name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª', emoji: 'üíé', quantity: 1 }
      ],
      result: {
        id: 'health_potion',
        name: '–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è',
        emoji: 'üß™',
        quantity: 2,
        stats: { health: 50 }
      },
      craftingTime: 120,
      requiredLevel: 2,
      goldCost: 50
    },
    {
      id: 'magic_sword',
      name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á',
      description: '–ú–µ—á, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å–∏–ª–æ–π',
      emoji: '‚ú®',
      rarity: 'epic',
      ingredients: [
        { id: 'old_sword', name: '–°—Ç–∞—Ä—ã–π –º–µ—á', emoji: '‚öîÔ∏è', quantity: 1 },
        { id: 'magic_crystal', name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª', emoji: 'üíé', quantity: 3 },
        { id: 'iron', name: '–ñ–µ–ª–µ–∑–æ', emoji: '‚öôÔ∏è', quantity: 5 }
      ],
      result: {
        id: 'magic_sword',
        name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á',
        emoji: '‚ú®',
        quantity: 1,
        stats: { attack: 45, mana: 20 }
      },
      craftingTime: 600,
      requiredLevel: 10,
      goldCost: 500
    },
    {
      id: 'reinforced_armor',
      name: '–£—Å–∏–ª–µ–Ω–Ω–∞—è –±—Ä–æ–Ω—è',
      description: '–ë—Ä–æ–Ω—è —Å –∂–µ–ª–µ–∑–Ω—ã–º–∏ –ø–ª–∞—Å—Ç–∏–Ω–∞–º–∏',
      emoji: 'üõ°Ô∏è',
      rarity: 'rare',
      ingredients: [
        { id: 'old_armor', name: '–°—Ç–∞—Ä–∞—è –±—Ä–æ–Ω—è', emoji: 'üõ°Ô∏è', quantity: 1 },
        { id: 'iron', name: '–ñ–µ–ª–µ–∑–æ', emoji: '‚öôÔ∏è', quantity: 4 },
        { id: 'leather', name: '–ö–æ–∂–∞', emoji: 'ü¶¨', quantity: 2 }
      ],
      result: {
        id: 'reinforced_armor',
        name: '–£—Å–∏–ª–µ–Ω–Ω–∞—è –±—Ä–æ–Ω—è',
        emoji: 'üõ°Ô∏è',
        quantity: 1,
        stats: { defense: 35, health: 25 }
      },
      craftingTime: 450,
      requiredLevel: 8,
      goldCost: 300
    }
  ], [])

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
  const possibleRecipes = useMemo(() => {
    const filledSlots = craftingSlots.filter(slot => slot.item !== null)
    if (filledSlots.length < 2) return []

    return recipes.filter(recipe => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      return recipe.ingredients.every(ingredient => {
        const slotWithIngredient = filledSlots.find(slot => 
          slot.item?.id === ingredient.id && slot.item.quantity >= ingredient.quantity
        )
        return slotWithIngredient !== undefined
      }) && recipe.ingredients.length <= filledSlots.length
    })
  }, [craftingSlots, recipes])

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'text-gray-400'
      case 'uncommon': return 'text-green-400'
      case 'rare': return 'text-blue-400'
      case 'epic': return 'text-purple-400'
      case 'legendary': return 'text-yellow-400'
      default: return 'text-gray-400'
    }
  }

  const getRarityBg = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'bg-gray-800'
      case 'uncommon': return 'bg-green-900'
      case 'rare': return 'bg-blue-900'
      case 'epic': return 'bg-purple-900'
      case 'legendary': return 'bg-yellow-900'
      default: return 'bg-gray-800'
    }
  }

  const addItemToSlot = (slotId: number, item: typeof availableItems[0]) => {
    setCraftingSlots(prev => prev.map(slot => 
      slot.id === slotId ? { ...slot, item } : slot
    ))
  }

  const removeItemFromSlot = (slotId: number) => {
    setCraftingSlots(prev => prev.map(slot => 
      slot.id === slotId ? { ...slot, item: null } : slot
    ))
  }

  const clearAllSlots = () => {
    setCraftingSlots(prev => prev.map(slot => ({ ...slot, item: null })))
    setSelectedRecipe(null)
  }

  const handleCraft = async () => {
    if (!selectedRecipe || !character) return

    setIsCrafting(true)
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∞—Ñ—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 2000))
      alert(`–°–æ–∑–¥–∞–Ω–æ: ${selectedRecipe.result.emoji} ${selectedRecipe.result.name}!`)
      clearAllSlots()
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –∫—Ä–∞—Ñ—Ç–∞!')
    } finally {
      setIsCrafting(false)
    }
  }

  if (!character) {
    return (
      <div className="container mx-auto px-4 py-6">
        <p className="text-center text-gray-400">–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-6 max-w-6xl">
      {/* Header */}
      <div className="text-center mb-6">
        <h1 className="text-3xl font-bold text-fantasy-gold mb-2">
          üî® –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫—Ä–∞—Ñ—Ç–∞
        </h1>
        <p className="text-gray-300">
          –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ–º–±–∏–Ω–∏—Ä—É—è —Ä–µ—Å—É—Ä—Å—ã
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-white">üì¶ –†–µ—Å—É—Ä—Å—ã</h2>
          <div className="bg-gray-800 rounded-lg p-4 max-h-96 overflow-y-auto">
            <div className="grid grid-cols-2 gap-2">
              {availableItems.map((item) => (
                <div
                  key={item.id}
                  className="bg-gray-700 rounded-lg p-3 cursor-pointer hover:bg-gray-600 transition-colors"
                  onClick={() => {
                    const emptySlot = craftingSlots.find(slot => slot.item === null)
                    if (emptySlot) {
                      addItemToSlot(emptySlot.id, item)
                    }
                  }}
                >
                  <div className="text-2xl text-center mb-1">{item.emoji}</div>
                  <div className="text-xs text-center text-white">{item.name}</div>
                  <div className="text-xs text-center text-fantasy-gold">√ó{item.quantity}</div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –∫—Ä–∞—Ñ—Ç–∏–Ω–≥ */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-white">‚öóÔ∏è –ö—Ä–∞—Ñ—Ç-—Å—Ç–æ–ª</h2>
          
          {/* –°–ª–æ—Ç—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ */}
          <div className="bg-gray-800 rounded-lg p-4">
            <div className="grid grid-cols-5 gap-2 mb-4">
              {craftingSlots.map((slot) => (
                <div
                  key={slot.id}
                  className="aspect-square border-2 border-dashed border-gray-600 rounded-lg flex items-center justify-center bg-gray-700 hover:bg-gray-600 transition-colors cursor-pointer"
                  onClick={() => slot.item && removeItemFromSlot(slot.id)}
                >
                  {slot.item ? (
                    <div className="text-center">
                      <div className="text-2xl">{slot.item.emoji}</div>
                      <div className="text-xs text-fantasy-gold">√ó{slot.item.quantity}</div>
                    </div>
                  ) : (
                    <div className="text-gray-500 text-2xl">+</div>
                  )}
                </div>
              ))}
            </div>

            <div className="flex space-x-2">
              <button
                onClick={clearAllSlots}
                className="flex-1 px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-bold rounded transition-colors"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </button>
              {selectedRecipe && (
                <button
                  onClick={handleCraft}
                  disabled={isCrafting}
                  className="flex-1 px-4 py-2 bg-fantasy-gold hover:bg-yellow-500 text-black font-bold rounded transition-colors disabled:opacity-50"
                >
                  {isCrafting ? '–°–æ–∑–¥–∞–µ–º...' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              )}
            </div>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∞—Ñ—Ç–∞ */}
          {selectedRecipe && (
            <div className={`${getRarityBg(selectedRecipe.rarity)} rounded-lg p-4 border border-gray-600`}>
              <h3 className="text-lg font-semibold text-white mb-2">üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç</h3>
              <div className="flex items-center space-x-3">
                <div className="text-3xl">{selectedRecipe.result.emoji}</div>
                <div>
                  <div className={`font-semibold ${getRarityColor(selectedRecipe.rarity)}`}>
                    {selectedRecipe.result.name} √ó{selectedRecipe.result.quantity}
                  </div>
                  <div className="text-sm text-gray-400">{selectedRecipe.description}</div>
                  {selectedRecipe.result.stats && (
                    <div className="text-xs text-fantasy-gold mt-1">
                      {Object.entries(selectedRecipe.result.stats).map(([stat, value]) => (
                        <span key={stat} className="mr-2">
                          {stat === 'attack' && '‚öîÔ∏è'}{stat === 'defense' && 'üõ°Ô∏è'}
                          {stat === 'health' && '‚ù§Ô∏è'}{stat === 'mana' && 'üíô'}
                          +{value}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-white">üìú –†–µ—Ü–µ–ø—Ç—ã</h2>
          <div className="bg-gray-800 rounded-lg p-4 max-h-96 overflow-y-auto">
            {possibleRecipes.length > 0 ? (
              <div className="space-y-2">
                {possibleRecipes.map((recipe) => (
                  <div
                    key={recipe.id}
                    onClick={() => setSelectedRecipe(recipe)}
                    className={`p-3 rounded-lg cursor-pointer transition-colors ${
                      selectedRecipe?.id === recipe.id
                        ? 'bg-fantasy-gold bg-opacity-20 border border-fantasy-gold'
                        : 'bg-gray-700 hover:bg-gray-600'
                    }`}
                  >
                    <div className="flex items-center space-x-2">
                      <span className="text-xl">{recipe.result.emoji}</span>
                      <div className="flex-1">
                        <div className={`font-semibold text-sm ${getRarityColor(recipe.rarity)}`}>
                          {recipe.result.name}
                        </div>
                        <div className="text-xs text-gray-400">
                          üí∞ {recipe.goldCost} | ‚è±Ô∏è {Math.floor(recipe.craftingTime / 60)}–º
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center text-gray-400 py-8">
                <div className="text-4xl mb-2">üîç</div>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–ª–æ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
      <div className="mt-6 text-center">
        <button
          onClick={() => setCurrentView('game')}
          className="px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white font-bold rounded-lg transition-colors"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É
        </button>
      </div>
    </div>
  )
}
