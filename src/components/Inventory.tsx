'use client'

import { useState } from 'react'
import { useGameStore } from '@/stores/gameStore'

interface InventoryItem {
  id: string
  name: string
  type: 'weapon' | 'armor' | 'consumable' | 'misc'
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary'
  value: number
  description: string
  icon: string
  quantity?: number
  stats?: {
    attack?: number
    defense?: number
    health?: number
    mana?: number
  }
}

export default function Inventory() {
  const { character, setCurrentView } = useGameStore()
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null)
  const [filter, setFilter] = useState<'all' | 'weapon' | 'armor' | 'consumable' | 'misc'>('all')

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const inventoryItems: InventoryItem[] = [
    {
      id: 'sword_1',
      name: '–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á',
      type: 'weapon',
      rarity: 'common',
      value: 150,
      description: '–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞–ª—å–Ω–æ–π –º–µ—á. –ù–∞–¥–µ–∂–Ω–æ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –≤–æ–∏–Ω–æ–≤.',
      icon: '‚öîÔ∏è',
      stats: { attack: 15 }
    },
    {
      id: 'shield_1',
      name: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —â–∏—Ç',
      type: 'armor',
      rarity: 'common',
      value: 80,
      description: '–õ–µ–≥–∫–∏–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π —â–∏—Ç. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∑–∞—â–∏—Ç—É.',
      icon: 'üõ°Ô∏è',
      stats: { defense: 10 }
    },
    {
      id: 'potion_1',
      name: '–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è',
      type: 'consumable',
      rarity: 'common',
      value: 25,
      description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è.',
      icon: 'üß™',
      quantity: 3,
      stats: { health: 50 }
    },
    {
      id: 'staff_1',
      name: '–ü–æ—Å–æ—Ö –º–∞–≥–∏–∏',
      type: 'weapon',
      rarity: 'rare',
      value: 500,
      description: '–î—Ä–µ–≤–Ω–∏–π –ø–æ—Å–æ—Ö, —É—Å–∏–ª–∏–≤–∞—é—â–∏–π –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.',
      icon: 'üîÆ',
      stats: { mana: 30, attack: 8 }
    },
    {
      id: 'armor_1',
      name: '–ö–æ–ª—å—á—É–≥–∞',
      type: 'armor',
      rarity: 'uncommon',
      value: 200,
      description: '–ü—Ä–æ—á–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞ –∏–∑ –∂–µ–ª–µ–∑–Ω—ã—Ö –∫–æ–ª–µ—Ü.',
      icon: 'ü¶∫',
      stats: { defense: 20 }
    },
    {
      id: 'gem_1',
      name: '–†—É–±–∏–Ω',
      type: 'misc',
      rarity: 'epic',
      value: 1000,
      description: '–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π —Ä—É–±–∏–Ω. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ü–µ–Ω—É.',
      icon: 'üíé'
    }
  ]

  const filteredItems = inventoryItems.filter(item => 
    filter === 'all' || item.type === filter
  )

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'text-gray-400'
      case 'uncommon': return 'text-green-400'
      case 'rare': return 'text-blue-400'
      case 'epic': return 'text-purple-400'
      case 'legendary': return 'text-yellow-400'
      default: return 'text-gray-400'
    }
  }

  const getRarityBg = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'bg-gray-800'
      case 'uncommon': return 'bg-green-900'
      case 'rare': return 'bg-blue-900'
      case 'epic': return 'bg-purple-900'
      case 'legendary': return 'bg-yellow-900'
      default: return 'bg-gray-800'
    }
  }

  const handleItemClick = (item: InventoryItem) => {
    setSelectedItem(item)
  }

  const handleUseItem = (item: InventoryItem) => {
    if (item.type === 'consumable') {
      alert(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${item.name}`)
      // TODO: Implement item usage logic
    } else {
      alert(`${item.name} –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é`)
    }
  }

  const handleSellItem = (item: InventoryItem) => {
    if (confirm(`–ü—Ä–æ–¥–∞—Ç—å ${item.name} –∑–∞ ${item.value} –∑–æ–ª–æ—Ç–∞?`)) {
      alert(`–ü—Ä–æ–¥–∞–Ω–æ: ${item.name} –∑–∞ ${item.value} –∑–æ–ª–æ—Ç–∞`)
      // TODO: Implement selling logic
    }
  }

  if (!character) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-gray-400">–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-6">
      {/* Header */}
      <div className="text-center mb-6">
        <h1 className="text-3xl font-bold text-fantasy-gold mb-2">
          üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        </h1>
        <p className="text-gray-300">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */}
        <div className="lg:col-span-2">
          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className="flex flex-wrap gap-2 mb-4">
            <button
              onClick={() => setFilter('all')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                filter === 'all'
                  ? 'bg-fantasy-gold text-black'
                  : 'bg-gray-700 text-gray-300 hover:text-white'
              }`}
            >
              –í—Å–µ
            </button>
            <button
              onClick={() => setFilter('weapon')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                filter === 'weapon'
                  ? 'bg-fantasy-gold text-black'
                  : 'bg-gray-700 text-gray-300 hover:text-white'
              }`}
            >
              ‚öîÔ∏è –û—Ä—É–∂–∏–µ
            </button>
            <button
              onClick={() => setFilter('armor')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                filter === 'armor'
                  ? 'bg-fantasy-gold text-black'
                  : 'bg-gray-700 text-gray-300 hover:text-white'
              }`}
            >
              üõ°Ô∏è –ë—Ä–æ–Ω—è
            </button>
            <button
              onClick={() => setFilter('consumable')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                filter === 'consumable'
                  ? 'bg-fantasy-gold text-black'
                  : 'bg-gray-700 text-gray-300 hover:text-white'
              }`}
            >
              üß™ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
            </button>
            <button
              onClick={() => setFilter('misc')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                filter === 'misc'
                  ? 'bg-fantasy-gold text-black'
                  : 'bg-gray-700 text-gray-300 hover:text-white'
              }`}
            >
              üíé –ü—Ä–æ—á–µ–µ
            </button>
          </div>

          {/* –°–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {filteredItems.map((item) => (
              <div
                key={item.id}
                onClick={() => handleItemClick(item)}
                className={`${getRarityBg(item.rarity)} border-2 border-gray-600 rounded-lg p-4 cursor-pointer hover:border-fantasy-gold transition-all duration-300 ${
                  selectedItem?.id === item.id ? 'ring-2 ring-fantasy-gold' : ''
                }`}
              >
                <div className="text-center">
                  <div className="text-3xl mb-2">{item.icon}</div>
                  <h3 className={`font-bold text-sm ${getRarityColor(item.rarity)}`}>
                    {item.name}
                  </h3>
                  {item.quantity && (
                    <p className="text-xs text-gray-400 mt-1">
                      x{item.quantity}
                    </p>
                  )}
                  <p className="text-xs text-fantasy-gold mt-1">
                    {item.value} –∑–æ–ª–æ—Ç–∞
                  </p>
                </div>
              </div>
            ))}
          </div>

          {filteredItems.length === 0 && (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üì¶</div>
              <p className="text-gray-400 text-lg">–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
            </div>
          )}
        </div>

        {/* –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
        <div className="lg:col-span-1">
          {selectedItem ? (
            <div className="bg-gray-800 rounded-lg p-6 sticky top-4">
              <div className="text-center mb-4">
                <div className="text-4xl mb-2">{selectedItem.icon}</div>
                <h2 className={`text-xl font-bold ${getRarityColor(selectedItem.rarity)}`}>
                  {selectedItem.name}
                </h2>
                <p className="text-sm text-gray-400 capitalize">
                  {selectedItem.rarity} {selectedItem.type}
                </p>
              </div>

              <div className="space-y-3 mb-6">
                <p className="text-gray-300 text-sm">
                  {selectedItem.description}
                </p>

                {selectedItem.stats && (
                  <div className="bg-gray-700 rounded p-3">
                    <h4 className="text-fantasy-gold font-bold mb-2">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h4>
                    <div className="space-y-1">
                      {selectedItem.stats.attack && (
                        <div className="flex justify-between text-sm">
                          <span>–ê—Ç–∞–∫–∞:</span>
                          <span className="text-red-400">+{selectedItem.stats.attack}</span>
                        </div>
                      )}
                      {selectedItem.stats.defense && (
                        <div className="flex justify-between text-sm">
                          <span>–ó–∞—â–∏—Ç–∞:</span>
                          <span className="text-blue-400">+{selectedItem.stats.defense}</span>
                        </div>
                      )}
                      {selectedItem.stats.health && (
                        <div className="flex justify-between text-sm">
                          <span>–ó–¥–æ—Ä–æ–≤—å–µ:</span>
                          <span className="text-green-400">+{selectedItem.stats.health}</span>
                        </div>
                      )}
                      {selectedItem.stats.mana && (
                        <div className="flex justify-between text-sm">
                          <span>–ú–∞–Ω–∞:</span>
                          <span className="text-purple-400">+{selectedItem.stats.mana}</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div className="flex justify-between text-sm">
                  <span>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                  <span className="text-fantasy-gold font-bold">
                    {selectedItem.value} –∑–æ–ª–æ—Ç–∞
                  </span>
                </div>
              </div>

              <div className="space-y-2">
                <button
                  onClick={() => handleUseItem(selectedItem)}
                  className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition-colors"
                >
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                </button>
                <button
                  onClick={() => handleSellItem(selectedItem)}
                  className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors"
                >
                  –ü—Ä–æ–¥–∞—Ç—å
                </button>
              </div>
            </div>
          ) : (
            <div className="bg-gray-800 rounded-lg p-6 text-center">
              <div className="text-4xl mb-4">üëÜ</div>
              <p className="text-gray-400">
                –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
              </p>
            </div>
          )}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
      <div className="mt-6 text-center">
        <button
          onClick={() => setCurrentView('game')}
          className="px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white font-bold rounded-lg transition-colors"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É
        </button>
      </div>
    </div>
  )
}
